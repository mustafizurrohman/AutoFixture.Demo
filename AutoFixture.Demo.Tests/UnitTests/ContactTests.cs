using AutoFixture.Demo.Core.Constants;
using AutoFixture.Demo.Tests.AssertionHelpers;
#pragma warning disable S125

namespace AutoFixture.Demo.Tests.UnitTests;

public class ContactTests : TestBase
{
    public ContactTests(ITestOutputHelper outputHelper)
        : base(outputHelper)
    {
    }


    [Theory]
    [AutoData]
    public void VerifyThatContactsAreCorrectlyGeneratedWithoutFixtureCustomization(List<Contact> contacts)
    {
        PrintObject(contacts);

        using (new AssertionScope())
        {
            contacts.ShouldBeValidContacts();
        }
    }

    [Theory]
    [AutoDataCustom(Localizations.Italian)]
    // [AutoDataContact]
    public void VerifyThatContactsAreCorrectlyGeneratedWithFixtureCustomization(List<Contact> contacts)
    {
        PrintObject(contacts);

        using (new AssertionScope())
        {
            contacts
                .ShouldBeValidContacts();

            contacts
                .Should()
                .HaveCount(3, because: "3 elements are generated by default");
        }
    }

    [Fact]
    public void DemoContactGenerationWithoutFixtureCustomization()
    {
        // Arrange
        var fixture = new Fixture();
        var personBuilder = fixture.Build<Person>();

        // Act
        var persons = personBuilder.CreateMany()
            .ToList();

        PrintObject(persons);

        // Assert
        using (new AssertionScope())
        {
            persons.Should().NotBeNull();
        }
    }

    [Theory]
    [AutoData]
    public void DemoContactGenerationWithFixtureCustomization(int num)
    {
        // Arrange- Create and customize fixture
        var fixture = new Fixture()
            .Customize(new AllCustomization());
        
        var personBuilder = fixture.Build<Person>();

        // Act
        var persons = personBuilder.CreateMany(num)
            .ToList();

        PrintObject(persons);

        // Assert
        using (new AssertionScope())
        {
            persons.ShouldBeValidPersons();
        }
    }
}
